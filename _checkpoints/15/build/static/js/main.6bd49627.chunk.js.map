{"version":3,"sources":["components/cityNameTitle/cityNameTitle.js","components/temperature/temperature.js","components/currentCondition/currentCondition.js","components/forecastItem/forecastItem.js","containers/WeatherCard.js","containers/helpers/generateForecast.js","components/citySelection/citySelection.js","App.js","utils/network.js","config/endpoints.js","index.js"],"names":["cityNameTitle_cityNameTitle","props","react_default","a","createElement","className","children","temperature_temperature","currentCondition_currentCondition","forecastItem_forecastItem","concat","icon","high","low","dayOfWeek","WeatherCard","state","backgroundIsActive","this","setState","classNames","getCardClassNames","onClick","onCardClick","bind","style","backgroundImage","cityImage","city","temperature","currentCondition","forecast","days","map","dayInfo","index","iconType","weather","main","toLowerCase","key","Math","round","temp","max","min","Date","getDay","generateForecasts","React","Component","citySelection_citySelection","htmlFor","id","onChange","selectionChangeHandler","value","App","_this2","url","axios","get","getWeatherByCity","then","response","console","log","data","name","description","photo","getForecastByCity","list","changeDisplayCity","event","target","onCitySelectionChanged","src_containers_WeatherCard","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.6bd49627.chunk.js","sourcesContent":["import React from 'react';\n\nimport './cityNameTitle.scss'\n\nexport default (props) => {\n  return (\n    <h2 className=\"cityNameTitle\">{props.children}</h2>\n  );\n};\n","import React from 'react';\n\nimport './temperature.scss';\n\nexport default (props) => {\n  return (\n    <div className=\"cardTemperature\">{props.children}</div>\n  );\n};\n","import React from 'react';\n\nimport './currentCondition.scss';\n\nexport default (props) => {\n  return (\n    <div className=\"currentCondition\">{props.children}</div>\n  );\n};\n","import React from 'react';\n\nimport Temperature from '../temperature/temperature';\n\nimport './forecastItem.scss';\n\nexport default (props) => {\n  return (\n    <li className='forecastItem'>\n      <span className={`forecastIcon wi ${props.icon}`}></span>\n      <Temperature>{props.high}</Temperature>\n      <Temperature>{props.low}</Temperature>\n      <p className='forecastDay'>{props.dayOfWeek}</p>\n    </li>\n  );\n};\n","import React from 'react';\n\nimport CityNameTitle from '../components/cityNameTitle/cityNameTitle';\nimport Temperature from '../components/temperature/temperature';\nimport CurrentCondition from '../components/currentCondition/currentCondition';\n\nimport generateForecasts from './helpers/generateForecast';\n\nimport './WeatherCard.scss';\n\nclass WeatherCard extends React.Component {\n  state = {\n    backgroundIsActive: false\n  };\n\n  onCardClick() {\n    this.setState({\n      backgroundIsActive: !this.state.backgroundIsActive\n    })\n  }\n\n  getCardClassNames() {\n    let classNames = 'card ';\n    if (this.state.backgroundIsActive) {\n      classNames += 'isActive';\n    }\n    return classNames;\n  }\n\n  render() {\n    return (\n      <div className={this.getCardClassNames()} onClick={this.onCardClick.bind(this)}>\n        <div className='cardUpperPortion'  style={{\"backgroundImage\": `url(${this.props.cityImage})`}}>\n          <CityNameTitle>{this.props.city}</CityNameTitle>\n          <div className='cardInfo'>\n            <Temperature>{this.props.temperature}</Temperature>\n            <CurrentCondition>{this.props.currentCondition}</CurrentCondition>\n          </div>\n        </div>\n        <div className='cardBottomPortion'>\n          <div className='cardDetail'>\n            <ul className='forecastsWrapper'>\n              {generateForecasts(this.props.forecast)}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default WeatherCard;\n","import React from 'react';\n\nimport ForecastItem from '../../components/forecastItem/forecastItem';\n\nexport default (forecast) => {\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  let dailyForecasts = [];\n\n  dailyForecasts = forecast.map((dayInfo, index) => {\n    const iconType = dayInfo.weather[0].main.toLowerCase();\n    return (\n      <ForecastItem\n        key={index}\n        icon={`wi-wu-${iconType}`}\n        high={Math.round(dayInfo.temp.max)}\n        low={Math.round(dayInfo.temp.min)}\n        dayOfWeek={days[((new Date().getDay() + index) % 7)]}>\n      </ForecastItem>\n    );\n  });\n\n  return dailyForecasts;\n}","/*\nThis is a 'functional component' that renders a dropdown selection box. The event handler (onChange)\nis passed in as part of the props, so it does not need to care about handling the user input other\nthan executing a function provided its parent component.\n\nIt will also associate the rendering with the stylesheet imported below.\n*/\n\nimport React from 'react';\n\nimport './citySelection.scss';\n\nexport default (props) => {\n  return (\n    <header>\n      <label htmlFor=\"citySelection\">Select a city:</label>\n      <div className=\"selectDropdown\">\n        <select id=\"citySelection\" onChange={props.selectionChangeHandler}>\n          <option value='edmonton'>Edmonton</option>\n          <option value='vancouver'>Vancouver</option>\n          <option value='calgary'>Calgary</option>\n          <option value='montreal'>Montreal</option>\n          <option value='toronto'>Toronto</option>\n        </select>\n      </div>\n    </header>\n  );\n};\n","import React, { Component } from 'react';\n\nimport WeatherCard from './containers/WeatherCard';\nimport CitySelection from './components/citySelection/citySelection';\n\nimport { getWeatherByCity, getForecastByCity } from './utils/network';\n\nimport './App.scss';\n\nconst DEFAULT_CITY = 'Edmonton';\n\nclass App extends Component {\n  state = {\n    city: '',\n    temperature: '',\n    currentCondition: '',\n    cityImage: '',\n    forecast: [],\n  };\n\n  changeDisplayCity(city) {\n    getWeatherByCity(city).then((response) => {\n      console.log(response)\n      this.setState({\n        city: response.data.name,\n        temperature: Math.round(response.data.main.temp),\n        currentCondition: response.data.weather[0].description,\n        cityImage: response.data.photo\n      })\n    });\n\n    getForecastByCity(city).then((response) => {\n      this.setState({\n        forecast: response.data.list\n      })\n    });\n  }\n\n  componentDidMount() {\n    this.changeDisplayCity(DEFAULT_CITY);\n  }\n\n  onCitySelectionChanged(event) {\n    this.changeDisplayCity(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySelection\n          selectionChangeHandler={this.onCitySelectionChanged.bind(this)}>\n        </CitySelection>\n        <WeatherCard\n          city={this.state.city}\n          temperature={this.state.temperature}\n          currentCondition={this.state.currentCondition}\n          cityImage={this.state.cityImage}\n          forecast={this.state.forecast}\n        >\n        </WeatherCard>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import axios from 'axios';\n\nimport { CITY_WEATHER_URL, CITY_FORECAST_URL } from '../config/endpoints';\n\nexport const getWeatherByCity = (city) => {\n  const url = CITY_WEATHER_URL + city;\n  return axios.get(url);\n};\n\nexport const getForecastByCity = (city) => {\n  const url = CITY_FORECAST_URL + city;\n  return axios.get(url);\n};\n","export const CITY_WEATHER_URL = 'https://sjtz41wo3m.execute-api.us-east-1.amazonaws.com/weather/?city=';\n\nexport const CITY_FORECAST_URL = 'https://9q8kp49olb.execute-api.us-east-1.amazonaws.com/forecast/?city=';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}